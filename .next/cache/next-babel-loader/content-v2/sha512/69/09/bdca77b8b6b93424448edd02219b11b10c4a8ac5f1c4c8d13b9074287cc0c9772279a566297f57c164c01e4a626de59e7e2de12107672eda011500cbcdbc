{"ast":null,"code":"import { MongoClient } from 'mongodb';\n\nasync function handler(req, res) {\n  if (req.method === 'POST') {\n    // Validate received data\n    const {\n      email,\n      name,\n      message\n    } = JSON.parse(req.body);\n\n    if (!email || !email.includes('@') || !name || name.trim() === '' || !message || message.trim() === '') {\n      res.status(422).json({\n        message: 'Invalid input.'\n      });\n      return;\n    } // Connect to MongoDB\n\n\n    let client;\n\n    try {\n      client = await MongoClient.connect('mongodb://localhost/next-course');\n    } catch (error) {\n      res.status(500).json({\n        message: 'Could not connect to database'\n      });\n      return;\n    } // Insert new message and close connection\n\n\n    const db = client.db();\n    const newMessage = {\n      email,\n      name,\n      message\n    };\n\n    try {\n      const result = await db.collection('messages').insertOne(newMessage);\n      newMessage.id = result.insertedId;\n    } catch (error) {\n      res.status(500).json({\n        message: 'Could not store data'\n      });\n      return;\n    }\n\n    client.close(); // Send response back\n\n    res.status(201).json({\n      message: 'Successfully saved!',\n      message: newMessage\n    });\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["/Users/cemcelik/Documents/GitHub/kcg-cms/pages/api/contact.js"],"names":["MongoClient","handler","req","res","method","email","name","message","JSON","parse","body","includes","trim","status","json","client","connect","error","db","newMessage","result","collection","insertOne","id","insertedId","close"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;;AACA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC7B,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACvB;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAA2BC,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACQ,IAAf,CAAjC;;AACA,QAAI,CAACL,KAAD,IAAU,CAACA,KAAK,CAACM,QAAN,CAAe,GAAf,CAAX,IAAkC,CAACL,IAAnC,IAA2CA,IAAI,CAACM,IAAL,OAAgB,EAA3D,IAAiE,CAACL,OAAlE,IAA6EA,OAAO,CAACK,IAAR,OAAmB,EAApG,EAAwG;AACpGT,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEP,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACH,KANsB,CAQvB;;;AACA,QAAIQ,MAAJ;;AACA,QAAI;AACAA,MAAAA,MAAM,GAAG,MAAMf,WAAW,CAACgB,OAAZ,CAAoB,iCAApB,CAAf;AACH,KAFD,CAEE,OAAOC,KAAP,EAAc;AACZd,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEP,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACH,KAfsB,CAiBvB;;;AACA,UAAMW,EAAE,GAAGH,MAAM,CAACG,EAAP,EAAX;AACA,UAAMC,UAAU,GAAG;AAAEd,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,KAAnB;;AACA,QAAI;AACA,YAAMa,MAAM,GAAG,MAAMF,EAAE,CAACG,UAAH,CAAc,UAAd,EAA0BC,SAA1B,CAAoCH,UAApC,CAArB;AACAA,MAAAA,UAAU,CAACI,EAAX,GAAgBH,MAAM,CAACI,UAAvB;AACH,KAHD,CAGE,OAAOP,KAAP,EAAc;AACZd,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEP,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACH;;AACDQ,IAAAA,MAAM,CAACU,KAAP,GA3BuB,CA6BvB;;AACAtB,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEP,MAAAA,OAAO,EAAE,qBAAX;AAAkCA,MAAAA,OAAO,EAAEY;AAA3C,KAArB;AACH;AACJ;;AACD,eAAelB,OAAf","sourcesContent":["import { MongoClient } from 'mongodb'\nasync function handler(req, res) {\n    if (req.method === 'POST') {\n        // Validate received data\n        const { email, name, message } = JSON.parse(req.body) \n        if (!email || !email.includes('@') || !name || name.trim() === '' || !message || message.trim() === '') {\n            res.status(422).json({ message: 'Invalid input.' })\n            return\n        }\n\n        // Connect to MongoDB\n        let client\n        try {\n            client = await MongoClient.connect('mongodb://localhost/next-course')\n        } catch (error) {\n            res.status(500).json({ message: 'Could not connect to database' })\n            return\n        }\n\n        // Insert new message and close connection\n        const db = client.db()\n        const newMessage = { email, name, message }\n        try {\n            const result = await db.collection('messages').insertOne(newMessage)\n            newMessage.id = result.insertedId\n        } catch (error) {\n            res.status(500).json({ message: 'Could not store data' })\n            return\n        }\n        client.close()\n\n        // Send response back\n        res.status(201).json({ message: 'Successfully saved!', message: newMessage })\n    }\n}\nexport default handler"]},"metadata":{},"sourceType":"module"}
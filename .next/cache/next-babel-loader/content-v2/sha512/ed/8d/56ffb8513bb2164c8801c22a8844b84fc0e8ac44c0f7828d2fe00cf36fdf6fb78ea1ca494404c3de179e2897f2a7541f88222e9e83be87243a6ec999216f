{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nconst postsPath = path.join(process.cwd(), 'content/posts');\nexport function getPostFiles() {\n  return fs.readdirSync(postsPath);\n}\nexport function getPostData(postId) {\n  const postSlug = postId.replace(/\\.json$/, ''); // removes file extension\n\n  const post = require(`../content/posts/${postSlug}.json`);\n\n  return _objectSpread(_objectSpread({}, post), {}, {\n    slug: postSlug\n  });\n}\nexport function getAllPosts() {\n  const postFiles = getPostFiles();\n  const allPosts = postFiles.map(postFile => {\n    return getPostData(postFile);\n  });\n  const sortedPosts = allPosts.sort((postA, postB) => postA.date > postB.data ? -1 : 1);\n  return sortedPosts;\n}\nexport function getFeaturedPosts() {\n  const allPosts = getAllPosts();\n  const featuredPosts = allPosts.filter(post => post.isFeatured);\n  return featuredPosts;\n}","map":{"version":3,"sources":["/Users/cemcelik/Documents/GitHub/kcg-cms/helpers/posts-util.js"],"names":["fs","path","postsPath","join","process","cwd","getPostFiles","readdirSync","getPostData","postId","postSlug","replace","post","require","slug","getAllPosts","postFiles","allPosts","map","postFile","sortedPosts","sort","postA","postB","date","data","getFeaturedPosts","featuredPosts","filter","isFeatured"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,SAAS,GAAGD,IAAI,CAACE,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,eAAzB,CAAlB;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC3B,SAAON,EAAE,CAACO,WAAH,CAAeL,SAAf,CAAP;AACH;AAED,OAAO,SAASM,WAAT,CAAqBC,MAArB,EAA6B;AAChC,QAAMC,QAAQ,GAAGD,MAAM,CAACE,OAAP,CAAe,SAAf,EAA0B,EAA1B,CAAjB,CADgC,CACgB;;AAChD,QAAMC,IAAI,GAAGC,OAAO,CAAE,oBAAmBH,QAAS,OAA9B,CAApB;;AACA,yCAAWE,IAAX;AAAiBE,IAAAA,IAAI,EAAEJ;AAAvB;AACH;AAED,OAAO,SAASK,WAAT,GAAuB;AAC1B,QAAMC,SAAS,GAAGV,YAAY,EAA9B;AACA,QAAMW,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcC,QAAQ,IAAI;AACvC,WAAOX,WAAW,CAACW,QAAD,CAAlB;AACH,GAFgB,CAAjB;AAGA,QAAMC,WAAW,GAAGH,QAAQ,CAACI,IAAT,CAAc,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACE,IAAN,GAAaD,KAAK,CAACE,IAAnB,GAA0B,CAAC,CAA3B,GAA+B,CAA/D,CAApB;AACA,SAAOL,WAAP;AACH;AAED,OAAO,SAASM,gBAAT,GAA4B;AAC/B,QAAMT,QAAQ,GAAGF,WAAW,EAA5B;AACA,QAAMY,aAAa,GAAGV,QAAQ,CAACW,MAAT,CAAgBhB,IAAI,IAAIA,IAAI,CAACiB,UAA7B,CAAtB;AACA,SAAOF,aAAP;AACH","sourcesContent":["import fs from 'fs'\nimport path from 'path'\n\nconst postsPath = path.join(process.cwd(), 'content/posts')\n\nexport function getPostFiles() {\n    return fs.readdirSync(postsPath)\n}\n\nexport function getPostData(postId) {\n    const postSlug = postId.replace(/\\.json$/, ''); // removes file extension\n    const post = require(`../content/posts/${postSlug}.json`)\n    return {...post, slug: postSlug}\n}\n\nexport function getAllPosts() {\n    const postFiles = getPostFiles()\n    const allPosts = postFiles.map(postFile => {\n        return getPostData(postFile)\n    })\n    const sortedPosts = allPosts.sort((postA, postB) => postA.date > postB.data ? -1 : 1)\n    return sortedPosts\n}\n\nexport function getFeaturedPosts() {\n    const allPosts = getAllPosts()\n    const featuredPosts = allPosts.filter(post => post.isFeatured)\n    return featuredPosts\n}"]},"metadata":{},"sourceType":"module"}